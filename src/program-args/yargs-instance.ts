import { Arguments } from 'yargs';
import yargsParser from 'yargs-parser';
import { CommandHandler, Context } from './yargs';

// Created putting the file 'yargs/build/lib/yargs-factory.js' in a typescript project

export declare function YargsFactory(_shim: any): (processArgs: any[], cwd: any, parentRequire: any) => YargsInstance;
declare const kCreateLogger: unique symbol;
declare const kDeleteFromParserHintObject: unique symbol;
declare const kFreeze: unique symbol;
declare const kGetDollarZero: unique symbol;
declare const kGetParserConfiguration: unique symbol;
declare const kGuessLocale: unique symbol;
declare const kGuessVersion: unique symbol;
declare const kParsePositionalNumbers: unique symbol;
declare const kPkgUp: unique symbol;
declare const kPopulateParserHintArray: unique symbol;
declare const kPopulateParserHintSingleValueDictionary: unique symbol;
declare const kPopulateParserHintArrayDictionary: unique symbol;
declare const kPopulateParserHintDictionary: unique symbol;
declare const kSanitizeKey: unique symbol;
declare const kSetKey: unique symbol;
declare const kUnfreeze: unique symbol;
declare const kValidateAsync: unique symbol;
declare const kGetCommandInstance: unique symbol;
declare const kGetContext: unique symbol;
declare const kGetHasOutput: unique symbol;
declare const kGetLoggerInstance: unique symbol;
declare const kGetParseContext: unique symbol;
declare const kGetUsageInstance: unique symbol;
declare const kGetValidationInstance: unique symbol;
declare const kHasParseCallback: unique symbol;
declare const kPostProcess: unique symbol;
declare const kRebase: unique symbol;
declare const kReset: unique symbol;
declare const kRunYargsParserAndExecuteCommands: unique symbol;
declare const kRunValidation: unique symbol;
declare const kSetHasOutput: unique symbol;
export declare class YargsInstance {
    $0: string;
    argv?: Arguments;
    customScriptName: boolean;
    parsed: yargsParser.DetailedArguments | false;
    constructor(processArgs: any[], cwd: any, parentRequire: any, shim: any);
    addHelpOpt(opt: any, msg: any): this;
    help(opt: any, msg: any): this;
    addShowHiddenOpt(opt: any, msg: any): this;
    showHidden(opt: any, msg: any): this;
    alias(key: any, value: any): this;
    array(keys: any): this;
    boolean(keys: any): this;
    check(f: any, global: any): this;
    choices(key: any, value: any): this;
    coerce(keys: any, value: any): this;
    conflicts(key1: any, key2: any): this;
    config(key: string, msg: any, parseFn: any): this;
    completion(cmd: any, desc: any, fn: any): this;
    command(cmd: any, description: any, builder: any, handler: any, middlewares: any, deprecated: any): this;
    commands(cmd: any, description: any, builder: any, handler: any, middlewares: any, deprecated: any): this;
    commandDir(dir: any, opts: any): this;
    count(keys: any): this;
    default(key: any, value: any, defaultDescription: any): this;
    defaults(key: any, value: any, defaultDescription: any): this;
    demandCommand(min: number, max: any, minMsg: any, maxMsg: any): this;
    demand(keys: any, max: any, msg: any): this;
    demandOption(keys: any, msg: any): this;
    deprecateOption(option: any, message: any): this;
    describe(keys: any, description: any): this;
    detectLocale(detect: any): this;
    env(prefix: any): this;
    epilogue(msg: any): this;
    epilog(msg: any): this;
    example(cmd: any, description: any): this;
    exit(code: any, err: any): void;
    exitProcess(enabled?: boolean): this;
    fail(f: any): this;
    getAliases(): any;
    getCompletion(args: any, done: any): Promise<any>;
    getDemandedOptions(): any;
    getDemandedCommands(): any;
    getDeprecatedOptions(): any;
    getDetectLocale(): any;
    getExitProcess(): any;
    getGroups(): any;
    getHelp(): any;
    getOptions(): any;
    getStrict(): any;
    getStrictCommands(): any;
    getStrictOptions(): any;
    global(globals: any, global: any): this;
    group(opts: any, groupName: any): this;
    hide(key: any): this;
    implies(key: any, value: any): this;
    locale(locale: any): any;
    middleware(callback: any, applyBeforeValidation: any, global: any): any;
    nargs(key: any, value: any): this;
    normalize(keys: any): this;
    number(keys: any): this;
    option(key: any, opt: any): this;
    options(key: any, opt: any): this;
    parse(args: any, shortCircuit: any, _parseFn: any): any;
    parseAsync(args: any, shortCircuit: any, _parseFn: any): any;
    parseSync(args: any, shortCircuit: any, _parseFn: any): any;
    parserConfiguration(config: any): this;
    pkgConf(key: any, rootPath: any): this;
    positional(key: any, opts: any): this;
    recommendCommands(recommend?: boolean): this;
    required(keys: any, max: any, msg: any): this;
    require(keys: any, max: any, msg: any): this;
    requiresArg(keys: any): this;
    showCompletionScript($0: any, cmd: any): this;
    showHelp(level?: 'log' | 'error' | 'warn' | ((s: string) => void)): this;
    scriptName(scriptName: any): this;
    showHelpOnFail(enabled: any, message: any): this;
    showVersion(level: any): this;
    skipValidation(keys: any): this;
    strict(enabled: any): this;
    strictCommands(enabled: any): this;
    strictOptions(enabled: any): this;
    string(key: any): this;
    terminalWidth(): any;
    updateLocale(obj: any): this;
    updateStrings(obj: any): this;
    usage(msg: any, description: any, builder: any, handler: any): this;
    version(opt: any, msg: any, ver: any): this;
    wrap(cols: any): this;
    [ kCreateLogger ](): {
        log: (...args: any[]) => void;
        error: (...args: any[]) => void;
    };
    [ kDeleteFromParserHintObject ](optionKey: any): void;
    [ kFreeze ](): void;
    [ kGetDollarZero ](): string;
    [ kGetParserConfiguration ](): any;
    [ kGuessLocale ](): void;
    [ kGuessVersion ](): any;
    [ kParsePositionalNumbers ](argv: any): any;
    [ kPkgUp ](rootPath: any): any;
    [ kPopulateParserHintArray ](type: any, keys: any): void;
    [ kPopulateParserHintSingleValueDictionary ](builder: any, type: any, key: any, value: any): void;
    [ kPopulateParserHintArrayDictionary ](builder: any, type: any, key: any, value: any): void;
    [ kPopulateParserHintDictionary ](builder: any, type: any, key: any, value: any, singleKeyHandler: any): void;
    [ kSanitizeKey ](key: any): any;
    [ kSetKey ](key: any, set: any): this;
    [ kUnfreeze ](): void;
    [ kValidateAsync ](validation: any, argv: any): any;
    getInternalMethods(): {
        getCommandInstance: any;
        getContext: any;
        getHasOutput: any;
        getLoggerInstance: any;
        getParseContext: any;
        getParserConfiguration: any;
        getUsageInstance: any;
        getValidationInstance: any;
        hasParseCallback: any;
        postProcess: any;
        reset: any;
        runValidation: any;
        runYargsParserAndExecuteCommands: any;
        setHasOutput: any;
    };
    [ kGetCommandInstance ](): any;
    [ kGetContext ](): any;
    [ kGetHasOutput ](): any;
    [ kGetLoggerInstance ](): any;
    [ kGetParseContext ](): any;
    [ kGetUsageInstance ](): any;
    [ kGetValidationInstance ](): any;
    [ kHasParseCallback ](): boolean;
    [ kPostProcess ](argv: any, populateDoubleDash: any, calledFromCommand: any, runGlobalMiddleware: any): any;
    [ kReset ](aliases?: {}): this;
    [ kRebase ](base: any, dir: any): any;
    [ kRunYargsParserAndExecuteCommands ](args: any, shortCircuit: any, calledFromCommand: any, commandIndex?: number, helpOnly?: boolean): any;
    [ kRunValidation ](aliases: any, positionalMap: any, parseErrors: any, isDefaultCommand: any): (argv: any) => void;
    [ kSetHasOutput ](): void;
}
export declare function isYargsInstance(y: any): boolean;
export { };
